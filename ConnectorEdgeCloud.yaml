openapi: 3.0.1
info:
  title: KOSMoS Connector Edge Cloud
  description: This file defines the http endpoint which provides a connector to the analysis cloud. The connector will be used by the edge to push messages to the cloud and receive results of the unit.
  version: 1.0.0
  contact:
    name: Jan Unterbrink
    email: jan.unterbrink@inovex.de
servers:
  - url: '/v1'
components:
  schemas:
    model:
      type: object
      required:
        - url
        - tag
      properties:
        url:
          type: string
          description: is the url, where the docker container can be found
        tag:
          type: string
          description: is the initial or actual tag of the docker container
    contract:
      type: object
      required:
        - contractId
        - modelsEdge
        - modelsCloud
      properties:
        contractId:
          type: string
          description: is the contract id
        modelsEdge:
          description: defines the initial models, which are deployed on the edge
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/model'
        modelsCloud:
          description: defines the initial models, which are deployed in the cloud
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/model'
        machines:
          description: defines the machine id which contains to this contract
          type: array
          minItems: 0
          items:
            type: object
            properties:
              machineId:
                type: string
                description: id of the machine
              sensors:
                type: array
                description: defines a sensor
                items:
                  type: object
                  properties:
                    sensorId:
                      type: string
                      description: is the id of the sensor
                    model:
                      $ref: '#/components/schemas/model'
    multiple_time_series-result:
      type: array
      description: defines multiple time series as result
      minItems: 1
      items:
        $ref: '#/components/schemas/time_series-result'
    time_series-result:
      type: object
      description: definition of time series data result
      properties:
        columns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: name of this column
              type:
                type: string
                enum: [ number, string ]
                description: defines the data type on this column (allowed values are number and string)
              allowed_values:
                type: array
                items:
                  type: string
                description: defines the values which are allowed in this column
            required:
              - name
              - type
          minItems: 1
        data:
          type: array
          description: the transmitted data
          minItems: 0
          items:
            type: array
            minItems: 0
            items:
              type: string
        meta:
          type: array
          items:
            type: string
          description: the possibility to add meta data like units or something else
      required:
        - columns
        - data
    analyse-text:
      type: object
      required:
        - total
      properties:
        total:
          type: string
          description: the end result of the computing unit
        predict:
          type: number
          description: probability of the end result
        parts:
          type: array
          description: the parts on which the result are made
          items:
            required:
              - machine
              - result
            properties:
              machine:
                type: string
                description: the id of the machine on which this calculation is made
              result:
                type: string
                description: the result of this specific machine
              predict:
                type: number
                description: the percentage on which the result is made
              sensors:
                type: array
                description: result made by the sensor
                items:
                  properties:
                    sensor:
                      type: string
                      description: the id of the sensor
                    result:
                      type: string
                      description: the result of the computing unit for this sensor
                    predict:
                      type: number
                      description: the percentage on which the result is made
                  required:
                    - sensor
                    - result
    analysis:
      type: object
      required:
        - result
        - from
        - date
        - type
        - calculated
      properties:
        from:
          type: string
          description: defines who has created the result
        date:
          type: integer
          description: defines when the result is created
        type:
          type: string
          enum:
            - time_series
            - multiple_time_series
            - text
          description: defines the type of this message; the result of a ml computing unit can be a time series, multiple time series or a string (text)
        calculated:
          type: object
          description: defines on which event the calculation has been begun
          properties:
            message:
              type: integer
              description: is the message id of the received message, which started the computing process
            received:
              type: integer
              description: is the timestamp when the message is received by the analysis unit
        result:
          description: contains the result, the used type compares to the type object in this message
          oneOf:
            - $ref: '#/components/schemas/analyse-text'
            - $ref: '#/components/schemas/time_series-result'
            - $ref: '#/components/schemas/multiple_time_series-result'
    data:
      type: object
      properties:
        signature:
          type: string
          description: is the signature above this message
        machine:
          type: string
          description: is the machine id on which this message is created
        sensor:
          type: string
          description: is the sensor id, which has measured this data point
        message_id:
          type: integer
          description: is the message id of this message
        from:
          type: string
          description: defines which uploads this data block
        columns:
          type: array
          minItems: 1
          items:
            properties:
              name:
                type: string
                description: defines the name of this column
              type:
                type: string
                description: defines the data type this property
              allowed_values:
                type: string
                description: defines allowed value for this column
            required:
              - name
              - type
        data:
          type: array
          minItems: 1
          description: are the data points
          items:
            type: array
            items:
              type: string
        meta:
          type: array
          minItems: 0
          items:
            properties:
              name:
                type: string
                description: is the name of the metadata
              type:
                type: string
                description: set the name type of the metadate
              description:
                type: string
                description: is the description of this metadata
              value:
                type: string
                description: is the value of this metadata
            required:
              - name
              - type
              - value
      required:
        - from
        - columns
        - data
paths:
  /analysis/{contractID}/{machineID}/{sensorID}:
    summary: central analysis endpoint
    post:
      parameters:
        - in: path
          name: machineID
          schema:
            type: string
          required: true
          description: is the machine id, on which a new result should be inserted
        - in: path
          name: sensorID
          schema:
            type: string
          required: true
          description: is the sensor id, on which a new result should be inserted
        - in: path
          name: contractID
          schema:
            type: string
          required: true
          description: is the contract id, on which a new result should be inserted
        - in: header
          name: token
          schema:
            type: string
            format: uuid
          required: true
      responses:
        201:
          description: OK - result created on the analysis cloud
        401:
          description: not authorized
        500:
          description: internal server error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                  $ref: "#/components/schemas/analysis"
  /analysis/{contractID}:
    summary: central analysis endpoint
    get:
      parameters:
        - in: header
          name: token
          schema:
            type: string
            format: uuid
          required: true
        - in: path
          name: contractID
          schema:
            type: string
          required: true
          description: is the contract id, on which a new result should be queried
        - in: query
          name: machine
          schema:
            type: string
          description: including only specific machines in a list of the result ids
        - in: query
          name: sensor
          schema:
            type: string
          description: including only specific sensor in the list of the result ids
        - in: query
          name: string
          schema:
            type: integer
          description: include only result after this specific time (using (rfc 3339)[https://tools.ietf.org/html/rfc3339.html#section-5.8])
          example: 2020-09-18T14:46:22+00:00
        - in: query
          name: end
          schema:
            type: string
          description: include only result before this specific time (using (rfc 3339)[https://tools.ietf.org/html/rfc3339.html#section-5.8])
          example: 2020-09-18T14:46:22+00:00
      responses:
        401:
          description: not authorized
        500:
          description: internal server error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    resultId:
                      type: integer
                      description: is the unique id of the result
                    date:
                      type: integer
                      description: defines when the result was made
                    machine:
                      type: string
                      description: is the id of the machine on which the result was made
  /analysis/{contractID}/{resultID}:
    get:
      parameters:
        - in: header
          name: token
          schema:
            type: string
            format: uuid
        - in: path
          name: contractID
          schema:
            type: string
          required: true
          description: is the contract id, on which a new result should be queried
        - in: path
          name: resultID
          schema:
            type: integer
          description: is the result id, which identify the result
          required: true
      summary: Returns result of the which should be published on the edge
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/analysis"
        '204':
          description: OK - no results are made
        '404':
          description: this contract could not be found or you don't have access to this contract id
        '401':
          description: not authorized
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
  /machine-data:
    post:
      summary: Upload sensor data to analysis cloud
      parameters:
        - in: header
          name: token
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: OK
        '401':
          description: not authorized
        '400':
          description: Bad Request
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/data"
  /auth:
    post:
      summary: authentication, to use all other endpoints
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user:
                  type: string
                  description: is the user name
                password:
                  type: string
                  description: is the password to this user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: is the authentication token
        400:
          description: failure
          content:
            application/json:
              schema:
                properties:
                  issue:
                    type: string
                    description: defines what is going wrong
                    example: Password is wrong
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
          
    delete:
      summary: log out / delete token - user combination
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: is the token which are created by the authentication backend
      responses:
        201:
          description: OK
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
    get:
      summary: test authentication
      parameters:
        - in: header
          name: token
          schema:
            type: string
          required: true
          description: is the token which are created by the authentication backend
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                required:
                  - user
                properties:
                  user:
                    type: string
                    description: is the used user
        204:
          description: OK - you are not logged in
        500:
          description: error
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    description: give more informations about the error
  /model/{contractId}:
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        name: contractId
        required: true
        schema:
          type: string
        description: is the contract id
    get:
      summary: returns a list of models, which should be updated
      responses:
        200:
          description: OK - new version is available
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model'
        500:
          description: error
        401:
          description: not authorized
        204:
          description: OK - no new version is available
    put:
      summary: set the version of a deployed model on the edge
      requestBody:
        content:
          application/json:
            schema:
              required:
                - state
                - models
              properties:
                state:
                  type: string
                  enum:
                    - deployed
                    - error
                    - ignored
                models:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/model'
      responses:
        201:
          description: OK
        401:
          description: not authorized
        500:
          description: internal server error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
  /contract:
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: get a list of all deployed contracts
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                items:
                  type: string
                  description: is the id of the contracts which are deployed and active in the analysis cloud
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
        401:
          description: not authorized
    post:
      summary: add a new contract
      requestBody:
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/contract'
      responses:
        201:
          description: OK
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
        401:
          description: not authorized
  /contract/{contractID}:
    parameters:
      - in: header
        name: token
        required: true
        schema:
          type: string
          format: uuid
      - in: path
        required: true
        name: contractID
        schema:
          type: string
        description: is the contract id
    get:
      summary: get informations about a single contract
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contract'
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
        401:
          description: not authorized
    delete:
      summary: delete a single contract
      responses:
        201:
          description: OK
        500:
          description: error
          content:
            application/json:
              schema:
                required:
                  - error
                properties:
                  error:
                    type: string
                    description: more informations about this error
        401:
          description: not authorized
  /health:
    get:
      summary: check if this endpoint is OK or not
      responses:
        204:
          description: OK
        500:
          description: error
  /ready:
    get:
        summary: test if the endpoint is ready or not
        responses:
          201:
            description: OK
          500:
            description: not ready

  /metrics:
    get:
        summary: endpoint to provide prometheus metrics
        responses:
          200:
            description: prometheus metrics
